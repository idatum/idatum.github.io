<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lab Notes - ADS-B</title><link href="https://idatum.net/" rel="alternate"></link><link href="https://idatum.net/feeds/ads-b.atom.xml" rel="self"></link><id>https://idatum.net/</id><updated>2024-03-24T00:00:00-07:00</updated><subtitle>Various personal weekend projects</subtitle><entry><title>ADS-B on a Rock64 with FreeBSD stable/14</title><link href="https://idatum.net/ads-b-on-a-rock64-with-freebsd-stable14.html" rel="alternate"></link><published>2024-03-24T00:00:00-07:00</published><updated>2024-03-24T00:00:00-07:00</updated><author><name>@joelp@mastodon.sdf.org</name></author><id>tag:idatum.net,2024-03-24:/ads-b-on-a-rock64-with-freebsd-stable14.html</id><summary type="html">&lt;p&gt;Notes on RTL-SDR USB devices with FreeBSD 14 on a Pine64 Rock64&lt;/p&gt;</summary><content type="html">&lt;p&gt;I previously ran NetBSD 10_RC for several months on my &lt;a href="https://wiki.pine64.org/wiki/ROCK64"&gt;Rock64 device&lt;/a&gt;. I was able to get the FlightAware version of &lt;a href="https://github.com/flightaware/dump1090"&gt;dump1090&lt;/a&gt; (aka dump1090-fa) to work reasonably well (but usually had a core dump on shutdown). Unfortunately, the full suite of  &lt;a href="https://github.com/osmocom/rtl-sdr"&gt;rtl-sdr&lt;/a&gt; tools, as well as &lt;a href="https://github.com/merbanan/rtl_433"&gt;rtl_433&lt;/a&gt;, didn't work well at all. I have details about this experiement at &lt;a href="/experimenting-with-rtl-sdr-on-netbsd-10.html"&gt;Experimenting with RTL-SDR on NetBSD 10&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://wiki.freebsd.org/arm/RockChip"&gt;FreeBSD&lt;/a&gt; has better USB support for RTL-SDR devices and there are images available for the Rock64. I decided to switch to FreeBSD to run dump1090 and rtl_433. These are my notes.&lt;/p&gt;
&lt;h4&gt;Booting FreeBSD 14 from eMMC storage&lt;/h4&gt;
&lt;p&gt;You can download a &lt;a href="http://ftp.freebsd.org/pub/FreeBSD/snapshots/ISO-IMAGES/14.0/"&gt;FreeBSD 14 stable image&lt;/a&gt; and prepare an SD card to boot. Unfortunately, the kernel provided in the image does not support booting from eMMC. I decided to build a custom FreeBSD stable/14 kernel to add eMMC support.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://wiki.freebsd.org/arm64"&gt;FreeBSD arm64 wiki&lt;/a&gt; has details on building a custom kernel. I created a custom kernel config at &lt;code&gt;/usr/src/sys/arm64/conf/ROCK64&lt;/code&gt; which includes support for booting from an eMMC card:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ROCKCHIP&lt;/span&gt;
&lt;span class="nv"&gt;ident&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;ROCK64&lt;/span&gt;

#&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pass&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;
&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;pass&lt;/span&gt;
&lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="nv"&gt;MMCCAM&lt;/span&gt;
&lt;span class="nv"&gt;nodevice&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nv"&gt;mmc&lt;/span&gt;
&lt;span class="nv"&gt;nodevice&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nv"&gt;mmcsd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After checking out and pulling stable/14 (&lt;code&gt;git checkout stable/14 ; git pull&lt;/code&gt;) in &lt;code&gt;/usr/src&lt;/code&gt; I was ready to build a new kernel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make buildkernel TARGET=arm64 KERNCONF=ROCK64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While that was building, I prepared the eMMC with the Rock64 image and mounted to &lt;code&gt;/mnt&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;dd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;FreeBSD&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;STABLE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;arm64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;aarch64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ROCK64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20240314&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="nv"&gt;c1c36102a6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;266971&lt;/span&gt;.&lt;span class="nv"&gt;img&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;da2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nv"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;progress&lt;/span&gt;
&lt;span class="nv"&gt;mount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;da1p2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;mnt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once the kernel was built, I installed to the mounted image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make installkernel TARGET=arm64 KERNCONF=ROCK64 DESTDIR=/mnt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That installs the kernel as well as flattened device tree files. At the time, it looked like the &lt;a href="https://wiki.freebsd.org/FlattenedDeviceTree"&gt;FreeBSD FlattenedDeviceTree page&lt;/a&gt; wasn't up to date. To ensure my custom kernel had the correct Rock64 DTB file I explicitely loaded it in &lt;code&gt;/boot/loader.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;rk3328&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rock64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtb_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dtb&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;rk3328&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rock64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtb_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/boot/dtb/rockchip/rk3328-rock64.dtb&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;rk3328&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rock64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtb_load&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;YES&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I then unmounted the eMCC and successfully booted FreeBSD stable/14 from an eMMC card on my Rock64. Two RTL-SDR USB devices were successfully found attached to the USB 3 port (using a powered USB 3 hub):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ugen2.6: &amp;lt;Generic RTL2832U&amp;gt; at usbus2
ugen2.7: &amp;lt;Realtek RTL2832U&amp;gt; at usbus2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Running dump1090-fa&lt;/h4&gt;
&lt;p&gt;To compile &lt;a href="https://github.com/flightaware/dump1090"&gt;dump1090-fa&lt;/a&gt; you need cmake and pkgconf packages, and need to modify the Makefile. Here's the &lt;code&gt;git diff&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;diff --git a/Makefile b/Makefile&lt;/span&gt;
&lt;span class="gh"&gt;index abe5b06..b85e4bd 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/Makefile&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/Makefile&lt;/span&gt;
&lt;span class="gu"&gt;@@ -3,8 +3,8 @@ PROGNAME=dump1090&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;DUMP1090_VERSION ?= unknown

&lt;span class="w"&gt; &lt;/span&gt;CFLAGS ?= -O3 -g
&lt;span class="gd"&gt;-DUMP1090_CFLAGS := -std=c11 -fno-common -Wall -Wmissing-declarations -Werror -Wformat-signedness -W&lt;/span&gt;
&lt;span class="gd"&gt;-DUMP1090_CPPFLAGS := -I. -D_POSIX_C_SOURCE=200112L -DMODES_DUMP1090_VERSION=\&amp;quot;$(DUMP1090_VERSION)\&amp;quot; -DMODES_DUMP1090_VARIANT=\&amp;quot;dump1090-fa\&amp;quot;&lt;/span&gt;
&lt;span class="gi"&gt;+DUMP1090_CFLAGS := -std=c11 -fno-common -Wall -Wmissing-declarations -W&lt;/span&gt;
&lt;span class="gi"&gt;+DUMP1090_CPPFLAGS := -I. -D_POSIX_C_SOURCE=200112L -DMODES_DUMP1090_VERSION=\&amp;quot;$(DUMP1090_VERSION)\&amp;quot; -DMODES_DUMP1090_VARIANT=\&amp;quot;dump1090-fa\&amp;quot; -DM_PI=3.14159265358979323846 -DM_SQRT2=1.41421356237309504880&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;LIBS = -lpthread -lm
&lt;span class="w"&gt; &lt;/span&gt;SDR_OBJ = cpu.o sdr.o fifo.o sdr_ifile.o dsp/helpers/tables.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The main issue is lack of M_PI, etc, constants. I was able to solve this without declaring macros in NetBSD but couldn't for FreeBSD.
Once built, I created an RC file &lt;code&gt;/usr/local/etc/rc.d/dump1090&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c1"&gt;# PROVIDE: dump1090&lt;/span&gt;
&lt;span class="c1"&gt;# REQUIRE: DAEMON NETWORKING&lt;/span&gt;
&lt;span class="c1"&gt;# KEYWORD: shutdown&lt;/span&gt;

&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Add the following lines to /etc/rc.conf.local, /etc/rc.conf or&lt;/span&gt;
&lt;span class="c1"&gt;# /etc/rc.conf.d/dump1090 to enable this service:&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# dump1090_enable (bool):       Set to NO by default.&lt;/span&gt;
&lt;span class="c1"&gt;#                               Set it to &amp;quot;YES&amp;quot; to enable dump1090.&lt;/span&gt;
&lt;span class="c1"&gt;# dump1090_device (str):        Set to 0 by default.&lt;/span&gt;
&lt;span class="c1"&gt;#                               RTL-SDR device index.&lt;/span&gt;

.&lt;span class="w"&gt; &lt;/span&gt;/etc/rc.subr

&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dump1090
&lt;span class="nv"&gt;rcvar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dump1090_enable

load_rc_config&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;

:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;dump1090_enable&lt;/span&gt;&lt;span class="p"&gt;:=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;NO&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;dump1090_device&lt;/span&gt;&lt;span class="p"&gt;:=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;dump1090_gain&lt;/span&gt;&lt;span class="p"&gt;:=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;20&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;NET_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--net-heartbeat 60 --net-ro-size 1300 --net-ro-interval 0.2 --net-ri-port 0 --net-ro-port 30002 --net-sbs-port 30003 --net-bi-port 30004,30104 --net-bo-port 30005&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;pidfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/var/run/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.pid&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;procname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/lab/dump1090/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/sbin/daemon&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;command_args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-S -m 3 -s info -l daemon --syslog-tag &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; -p &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pidfile&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;procname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; --quiet --device-index &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;dump1090_device&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; --gain &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;dump1090_gain&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NET_OPTIONS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

run_rc_command&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And settings in &lt;code&gt;/etc/rc.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dump1090_enable=&amp;quot;YES&amp;quot;
dump1090_device=&amp;quot;1&amp;quot;
dump1090_gain=&amp;quot;20&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I was then able to remotely connect my PiAware Docker container to dump1090 running on my Rock64. The reason I do this is the Rock64 is in outside weatherproof enclosure close to my 1090MHz and 433MHz antennas. I have a good ethernet connection from the Rock64 to my Docker server.&lt;/p&gt;
&lt;h4&gt;Running rtl_433&lt;/h4&gt;
&lt;p&gt;FreeBSD has a package for rtl-433, so I had no issues running this on my other RTL-SDR USB receiver. If I run rtl_test this is device 0, and the ADS-B one is device 1. I have to specify this in both configurations. For example, here are the relevent lines in /usr/local/etc/rtl_433.conf:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gu"&gt;##&lt;/span&gt; Tuner options
&lt;span class="gh"&gt;#&lt;/span&gt; as command line option:
&lt;span class="gh"&gt;#&lt;/span&gt;   [-d &amp;lt;RTL-SDR USB device index&amp;gt;] (default: 0)
&lt;span class="gh"&gt;#&lt;/span&gt;   [-d :&amp;lt;RTL-SDR USB device serial (can be set with rtl_eeprom -s)&amp;gt;]
&lt;span class="gh"&gt;#&lt;/span&gt;   [-d &amp;quot;&amp;quot; Open default SoapySDR device
&lt;span class="gh"&gt;#&lt;/span&gt;   [-d driver=rtlsdr Open e.g. specific SoapySDR device
&lt;span class="gh"&gt;#&lt;/span&gt; default is &amp;quot;0&amp;quot; (RTL-SDR) or &amp;quot;&amp;quot; (SoapySDR)
device        0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have several 433MHz temperature and humidity sensors and I use rtl_433 to publish to my Mosquitto MQTT broker, with of course the obligatory Home Assistant integration.&lt;/p&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;The Rock64 runs FreeBSD 14 well and I've been using it as both an ADS-B and rtl_433 receiver for several weeks now. I'm more comfortable with NetBSD's &lt;code&gt;build.sh&lt;/code&gt;, but building a custom FreeBSD stable/14 kernel was straight forward.&lt;/p&gt;
&lt;p&gt;I also have a &lt;a href="https://wiki.pine64.org/wiki/ROCKPro64"&gt;RockPro64 device&lt;/a&gt; and I'll keep NetBSD 10 on that -- runs really well.&lt;/p&gt;
&lt;p&gt;Overall, a fun project and the Rock64 is a fun little device.&lt;/p&gt;</content><category term="ADS-B"></category></entry><entry><title>Listening to flight details as aircraft pass overhead</title><link href="https://idatum.net/listening-to-flight-details-as-aircraft-pass-overhead.html" rel="alternate"></link><published>2023-12-17T00:00:00-08:00</published><updated>2023-12-17T00:00:00-08:00</updated><author><name>@joelp@mastodon.sdf.org</name></author><id>tag:idatum.net,2023-12-17:/listening-to-flight-details-as-aircraft-pass-overhead.html</id><summary type="html">&lt;p&gt;Using TTS to listen to ADS-B output.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are some notes to share on how I use my ADS-B RTL-SDR receiver, &lt;a href="https://github.com/idatum/adsb2mqtt"&gt;adsb2mqtt&lt;/a&gt; and an MQTT broker, and text-to-speech (TTS) to play details of nearby passing aircraft.&lt;/p&gt;
&lt;p&gt;I live near a busy airport. I can see aircraft flying low enough to make out and guess the airline and model. Wouldn't it be cool to have my computer tell me instead of guessing? Also, it would be nice to know the departure/arrival country and city.&lt;/p&gt;
&lt;h4&gt;Publishing MQTT messages with ADS-B details&lt;/h4&gt;
&lt;p&gt;As explained in &lt;a href="https://www.idatum.net/experimenting-with-rtl-sdr-on-netbsd-10.html"&gt;Experimenting with RTL-SDR on NetBSD 10&lt;/a&gt; I run the FlightAware maintained &lt;a href="https://github.com/flightaware/dump1090"&gt;dump1090-fa&lt;/a&gt; on a NetBSD 10 in an outdoor enclosure that is close to my 1090mhz ADS-B antenna.&lt;/p&gt;
&lt;p&gt;I run &lt;a href="https://github.com/idatum/adsb2mqtt/blob/main/Dockerfile"&gt;adsb2mqtt&lt;/a&gt; in a Docker container (Debian 12 server) that connects to the NetBSD dump1090-fa port 30003. That repo has details on parameters to adjust which aircraft are processed (i.e. ones you can see from your own location).&lt;/p&gt;
&lt;p&gt;This setup has been stable for several months since I switched from running everying on an RPi3 (yes, .NET 7 works on a Raspberry Pi), but you can use anything to host dump1090-fa or run adsb2mqtt with .NET 7.&lt;/p&gt;
&lt;p&gt;Ultimately, I'm now able to process ADS-B messages and publish them to my MQTT broker -- any MQTT client can subscribe to messages of locally passing aircaft.&lt;/p&gt;
&lt;h4&gt;Enhancing with flight and airline information&lt;/h4&gt;
&lt;p&gt;Now that I can have an MQTT client subscribe to ADS-B info, I can receive altitude and distance, latitude/longitude, speed, heading, and flight and aircraft (ICAO) numbers.&lt;/p&gt;
&lt;p&gt;In order to get more details such as departure/arrival city, more aircraft details, and airline information, we need to access a database of that information. I use a combination FlightAware's JSON files that come with dump1090-fa (&lt;a href="https://github.com/flightaware/dump1090/tree/master/public_html/db"&gt;dump1090/public_html/db&lt;/a&gt;) and FlightAware's AeroAPI. AeroAPI has a free tier based on the number of requests which is more than enough for my use.&lt;/p&gt;
&lt;p&gt;I have this implemented in a Python class &lt;a href="https://github.com/idatum/adsb2mqtt/blob/main/examples/adsb_speech_aeroapi.py"&gt;AdsbSpeech&lt;/a&gt; that I use in a &lt;a href="https://pypi.org/project/paho-mqtt/"&gt;Paho MQTT&lt;/a&gt; Python client (again, I have this running in Docker). The &lt;code&gt;flight&lt;/code&gt; parameter is the JSON payload from the adsb2mqtt message.&lt;/p&gt;
&lt;p&gt;With this, I have Python code that can generate a text sentence describing the flight. Using this in a Python MQTT client subscribed to adsb2mqtt messages, I can publish back an MQTT message so any MQTT client that can do TTS can speak that sentence.&lt;/p&gt;
&lt;p&gt;As an optimization, I make sure I only publish that message every 30 seconds though, as ADS-B info comes in quickly. For an airline passing over at ~5000ft MSL that's about 2 or 3 total messages before it passes outside of my 2.3 nautical mile radius filter.&lt;/p&gt;
&lt;h4&gt;Using Azure for TTS&lt;/h4&gt;
&lt;p&gt;Now that I can generate a sentence describing a passing flight, any TTS solution works. If you have Home Assistant Assist set up, that would probably work well (although I never tried).&lt;/p&gt;
&lt;p&gt;I use Azure Speech service to generate a wave file. It's cheap and easy to use, and I like their voices. Here's an abbreviated Python code snippet that generates a temporary wave file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NamedTemporaryFile&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;azure.cognitiveservices.speech&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SpeechConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SpeechSynthesizer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;azure.cognitiveservices.speech.audio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AudioOutputConfig&lt;/span&gt;

&lt;span class="n"&gt;Speech_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SpeechConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;COGS_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;COGS_REGION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_wave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;NamedTemporaryFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/var/www/wav&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.wav&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;audio_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AudioOutputConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ssml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;speak version=&amp;quot;1.0&amp;quot; xmlns=&amp;quot;http://www.w3.org/2001/10/synthesis&amp;quot; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt;        xmlns:mstts=&amp;quot;https://www.w3.org/2001/mstts&amp;quot; xml:lang=&amp;quot;en-US&amp;quot;&amp;gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;lt;voice name=&amp;quot;en-US-JennyNeural&amp;quot;&amp;gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;lt;mstts:express-as style=&amp;quot;newscast&amp;quot;&amp;gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt;            &amp;lt;prosody rate=&amp;quot;+25.00%&amp;quot;&amp;gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt;            &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt;            &amp;lt;/prosody&amp;gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;lt;/mstts:express-as&amp;gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;lt;/voice&amp;gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;lt;/speak&amp;gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;synthesizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SpeechSynthesizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;speech_config&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Speech_config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audio_config&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;audio_config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;synthesizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak_ssml_async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ssml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One more optimization that I do is make sure I only generate a single wave file available to all clients that happen to be running. For example, I have a client on the upstairs balcony, in WSL2 on my Win11 laptop, even one on my Android phone running &lt;a href="https://github.com/termux"&gt;termux with termux-api&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What I do is create the TTS wave file in a Python Flask app (again, Docker) and publish the wave filename. Now MQTT clients can be really simple and no need to have keys to my Azure account etc on other clients. Here's a snippet of a shell script I run in WSL2 on my laptop that will play the wave for passing aircraft:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;mosquitto_sub&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ADSB/speech/wave&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;mosquitto_sub&lt;span class="w"&gt; &lt;/span&gt;-P&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;~/.mosquitto_sub&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-h&lt;span class="w"&gt; &lt;/span&gt;mqtt.host&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8883&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;msg
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;wave&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$msg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;--silent&lt;span class="w"&gt; &lt;/span&gt;--output&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;-X&lt;span class="w"&gt; &lt;/span&gt;POST&lt;span class="w"&gt; &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type: text/plain&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;wave&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http:myserver/speech/wave&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;paplay
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, it's just about getting audio to work on Linux (no small feat).&lt;/p&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;dump1090-fa feeds adsb2mqtt raw ADS-B data; adsb2mqtt generates MQTT messages for nearby flights, filtered by distance from my home.&lt;/li&gt;
&lt;li&gt;An MQTT client uses AdsbSpeech class to enhance data and generate a sentence to be used for TTS.&lt;/li&gt;
&lt;li&gt;Another MQTT client uses Azure Speech to generate and share via HTTP a generated wave file and publishes the filename to MQTT.&lt;/li&gt;
&lt;li&gt;Various devices can use simple client tools like mosquitto_sub and curl to retrieve and play the wave file. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's a simple pleasure to sit on my balcony and enjoy some plane spotting, now with details played back from my computer.&lt;/p&gt;</content><category term="ADS-B"></category></entry></feed>